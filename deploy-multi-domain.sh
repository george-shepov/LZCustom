#!/bin/bash

# Multi-Domain LZCustom Deployment Script
# Deploys giorgiy.org, giorgiy-shepov.com, bravoohio.org, lodexinc.com
# Features: SSL certificates, email server, AI chat, domain-specific branding

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}ðŸš€ Multi-Domain LZCustom Deployment${NC}"
echo "=========================================="
echo ""

# Configuration
DOMAINS=("giorgiy.org" "giorgiy-shepov.com" "bravoohio.org" "lodexinc.com")
PROJECT_DIR="/home/shepov/LZCustom"
EMAIL="george@giorgiy.org"

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if running as root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        print_error "Please run this script with sudo"
        exit 1
    fi
}

# Function to install system dependencies
install_dependencies() {
    print_status "Installing system dependencies..."
    
    apt update && apt upgrade -y
    apt install -y \
        docker.io \
        docker-compose \
        nginx \
        certbot \
        python3-certbot-nginx \
        ufw \
        fail2ban \
        git \
        curl \
        wget \
        unzip \
        htop \
        tree
    
    # Start and enable Docker
    systemctl start docker
    systemctl enable docker
    
    # Add user to docker group
    usermod -aG docker shepov
    
    print_success "System dependencies installed"
}

# Function to setup firewall
setup_firewall() {
    print_status "Configuring UFW firewall..."
    
    # Reset firewall
    ufw --force reset
    
    # Default policies
    ufw default deny incoming
    ufw default allow outgoing
    
    # Allow essential services
    ufw allow ssh
    ufw allow 80/tcp    # HTTP
    ufw allow 443/tcp   # HTTPS
    ufw allow 25/tcp    # SMTP
    ufw allow 587/tcp   # SMTP Submission
    ufw allow 993/tcp   # IMAPS
    ufw allow 8080/tcp  # Roundcube
    
    # Enable firewall
    ufw --force enable
    
    print_success "Firewall configured"
}

# Function to create required directories
create_directories() {
    print_status "Creating required directories..."
    
    mkdir -p /var/www/html
    mkdir -p $PROJECT_DIR/docker-data/dms/{mail-data,mail-state,mail-logs,config}
    mkdir -p $PROJECT_DIR/docker-data/fail2ban
    mkdir -p $PROJECT_DIR/nginx/logs
    
    # Set proper permissions
    chown -R shepov:shepov $PROJECT_DIR
    chmod -R 755 $PROJECT_DIR
    
    print_success "Directories created"
}

# Function to setup SSL certificates
setup_ssl() {
    print_status "Setting up SSL certificates..."
    
    # Run our SSL setup script
    cd $PROJECT_DIR
    chmod +x setup-ssl.sh
    ./setup-ssl.sh
    
    print_success "SSL certificates configured"
}

# Function to deploy containers
deploy_containers() {
    print_status "Deploying Docker containers..."
    
    cd $PROJECT_DIR
    
    # Stop any existing containers
    docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
    
    # Pull latest images
    docker-compose -f docker-compose.prod.yml pull
    
    # Build and start containers
    docker-compose -f docker-compose.prod.yml up -d --build
    
    print_success "Containers deployed"
}

# Function to setup Ollama models
setup_ollama_models() {
    print_status "Setting up Ollama AI models..."
    
    # Wait for Ollama to be ready
    sleep 30
    
    # Pull required models
    docker exec ollama ollama pull llama3.2:3b
    docker exec ollama ollama pull gemma2:2b
    docker exec ollama ollama pull qwen2.5:7b-instruct-q4_k_m
    
    print_success "Ollama models installed"
}

# Function to configure mail accounts
setup_mail_accounts() {
    print_status "Setting up mail accounts..."
    
    # Create basic mail accounts for each domain
    for domain in "${DOMAINS[@]}"; do
        # Create main accounts
        docker exec mailserver setup email add "noreply@$domain" "AutoGenerated123!"
        docker exec mailserver setup email add "contact@$domain" "ContactForm123!"
        
        print_success "Mail accounts created for $domain"
    done
    
    # Create main admin account
    docker exec mailserver setup email add "george@giorgiy.org" "AdminPassword123!"
    
    print_warning "Please change default passwords using: docker exec mailserver setup email update <email> <newpassword>"
}

# Function to run system tests
run_tests() {
    print_status "Running system tests..."
    
    # Test web services
    for domain in "${DOMAINS[@]}"; do
        if curl -f -s "https://$domain" > /dev/null; then
            print_success "$domain is responding"
        else
            print_warning "$domain is not responding"
        fi
    done
    
    # Test mail server
    if docker exec mailserver ss -lntp | grep -E ':25|:143|:587|:993' > /dev/null; then
        print_success "Mail server is running"
    else
        print_warning "Mail server may have issues"
    fi
    
    # Test AI service
    if docker exec ollama ollama list > /dev/null; then
        print_success "AI service is running"
    else
        print_warning "AI service may have issues"
    fi
}

# Function to display deployment summary
show_summary() {
    echo ""
    echo -e "${PURPLE}ðŸŽ‰ Deployment Complete!${NC}"
    echo "================================"
    echo ""
    echo -e "${GREEN}Websites:${NC}"
    for domain in "${DOMAINS[@]}"; do
        echo -e "  â€¢ https://$domain (with domain-specific branding)"
        echo -e "  â€¢ https://www.$domain"
    done
    echo ""
    echo -e "${GREEN}Services:${NC}"
    echo -e "  â€¢ Mail Server: All domains configured"
    echo -e "  â€¢ Webmail: https://mail.giorgiy.org:8080"
    echo -e "  â€¢ AI Chat: Integrated with timeout fixes"
    echo -e "  â€¢ Contact Forms: Email integration enabled"
    echo ""
    echo -e "${GREEN}Management:${NC}"
    echo -e "  â€¢ Logs: $PROJECT_DIR/nginx/logs/"
    echo -e "  â€¢ Database: $PROJECT_DIR/backend/lz_custom.db"
    echo -e "  â€¢ Mail Data: $PROJECT_DIR/docker-data/dms/"
    echo ""
    echo -e "${YELLOW}Next Steps:${NC}"
    echo -e "  1. Change default mail passwords"
    echo -e "  2. Configure DNS MX records for mail domains"
    echo -e "  3. Test contact forms on all domains"
    echo -e "  4. Monitor logs for any issues"
    echo ""
    echo -e "${BLUE}Useful Commands:${NC}"
    echo -e "  â€¢ View logs: docker-compose -f docker-compose.prod.yml logs -f"
    echo -e "  â€¢ Restart services: docker-compose -f docker-compose.prod.yml restart"
    echo -e "  â€¢ Update SSL: certbot renew"
    echo ""
}

# Main deployment function
main() {
    echo -e "${BLUE}Starting multi-domain deployment...${NC}"
    
    check_root
    install_dependencies
    setup_firewall
    create_directories
    setup_ssl
    deploy_containers
    setup_ollama_models
    setup_mail_accounts
    run_tests
    show_summary
    
    print_success "Multi-domain deployment completed successfully!"
}

# Error handling
trap 'print_error "Deployment failed at line $LINENO"' ERR

# Run main function
main "$@"