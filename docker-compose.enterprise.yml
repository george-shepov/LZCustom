# Enterprise Multi-Domain Platform with Full Database Stack
# Supports: PostgreSQL, Redis, MongoDB, Qdrant (Vector DB)
# Domains: giorgiy.org, giorgiy-shepov.com, bravoohio.org, lodexinc.com

version: '3.8'

services:
  # Vue.js Frontend
  lzcustom-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lzcustom-frontend
    restart: unless-stopped
    volumes:
      - ./frontend/public/assets:/app/public/assets:ro
    environment:
      - NODE_ENV=production
    networks:
      - web-network
    depends_on:
      - lzcustom-backend

  # FastAPI Backend with Multi-Database Support
  lzcustom-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lzcustom-backend
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    environment:
      - PYTHONPATH=/app
      # PostgreSQL Configuration
      - DATABASE_URL=postgresql://lzcustom:lzcustom_password@postgres:5432/lzcustom_db
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=lzcustom_db
      - POSTGRES_USER=lzcustom
      - POSTGRES_PASSWORD=lzcustom_password
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # MongoDB Configuration
      - MONGODB_URL=mongodb://mongo:27017/lzcustom_docs
      - MONGODB_HOST=mongo
      - MONGODB_PORT=27017
      - MONGODB_DB=lzcustom_docs
      # Vector Database Configuration
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      # AI/ML Configuration
      - OLLAMA_HOST=http://ollama:11434
      # Email Configuration
      - SMTP_SERVER=mailserver
      - SMTP_PORT=587
      - SMTP_USERNAME=noreply@giorgiy.org
      - FROM_EMAIL=noreply@giorgiy.org
      - TO_EMAIL=george@giorgiy.org
    networks:
      - web-network
      - db-network
      - mail-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_started
      qdrant:
        condition: service_started
      ollama:
        condition: service_started

  # PostgreSQL Database (Primary Relational Data)
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=lzcustom_db
      - POSTGRES_USER=lzcustom
      - POSTGRES_PASSWORD=lzcustom_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lzcustom -d lzcustom_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis (Caching, Sessions, Real-time Data)
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    environment:
      - REDIS_PASSWORD=redis_password
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB (Document Storage, CMS, Flexible Data)
  mongo:
    image: mongo:7
    container_name: mongodb-docs
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongoadmin
      - MONGO_INITDB_ROOT_PASSWORD=mongo_password
      - MONGO_INITDB_DATABASE=lzcustom_docs
    volumes:
      - mongodb-data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Qdrant Vector Database (AI Embeddings, Semantic Search)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-vector
    restart: unless-stopped
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant-data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Ollama AI Model Server
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-ai
    restart: unless-stopped
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0:11434
    networks:
      - web-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/html:/var/www/html:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - web-network
    depends_on:
      - lzcustom-frontend
      - lzcustom-backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Administration Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@giorgiy.org
      - PGADMIN_DEFAULT_PASSWORD=pgadmin_password
      - PGADMIN_LISTEN_PORT=5050
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:5050"
    networks:
      - db-network
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis_password
    ports:
      - "8081:8081"
    networks:
      - db-network
    depends_on:
      - redis

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=mongoadmin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=mongo_password
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=mongoexpress_password
    ports:
      - "8082:8081"
    networks:
      - db-network
    depends_on:
      - mongo

  # Mail Server (From previous setup)
  mailserver:
    image: ghcr.io/docker-mailserver/docker-mailserver:latest
    container_name: mailserver
    hostname: mail.giorgiy.org
    restart: unless-stopped
    ports:
      - "25:25"
      - "143:143"
      - "465:465"
      - "587:587"
      - "993:993"
    volumes:
      - ./docker-data/dms/mail-data/:/var/mail/
      - ./docker-data/dms/mail-state/:/var/mail-state/
      - ./docker-data/dms/mail-logs/:/var/log/mail/
      - ./docker-data/dms/config/:/tmp/docker-mailserver/
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - OVERRIDE_HOSTNAME=mail.giorgiy.org
      - DOMAINNAME=giorgiy.org
      - POSTMASTER_ADDRESS=postmaster@giorgiy.org
      - PERMITTED_SENDER_DOMAINS=giorgiy.org,giorgiy-shepov.com,bravoohio.org,lodexinc.com
      - SSL_TYPE=letsencrypt
      - SSL_CERT_PATH=/etc/letsencrypt/live/giorgiy.org/fullchain.pem
      - SSL_KEY_PATH=/etc/letsencrypt/live/giorgiy.org/privkey.pem
      - ENABLE_SPAMASSASSIN=1
      - ENABLE_CLAMAV=1
      - ENABLE_FAIL2BAN=1
      - ENABLE_POSTGREY=1
      - ENABLE_AMAVIS=1
      - ENABLE_OPENDKIM=1
      - ENABLE_OPENDMARC=1
      - ENABLE_POLICYD_SPF=1
      - LOG_LEVEL=info
      - TZ=America/New_York
    networks:
      - mail-network
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.mail.unix.max_dgram_qlen=50
    healthcheck:
      test: "ss -lntp | grep -E ':25|:143|:465|:587|:993' || exit 1"
      timeout: 45s
      interval: 30s
      retries: 3
      start_period: 90s

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - db-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_password
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - db-network
    depends_on:
      - prometheus

# Persistent Volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  mongodb-data:
    driver: local
  qdrant-data:
    driver: local
  ollama-data:
    driver: local
  pgadmin-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Networks
networks:
  web-network:
    driver: bridge
  db-network:
    driver: bridge
  mail-network:
    driver: bridge